<!-- NUVORA — SHOP (Natural Materials Collection) -->
<style>
:root{
  --cloud-whisper:#F6F6F6; --moonlit-sand:#EDE7DD; --silver-mist:#DADCE0; 
  --pale-graphite:#B2B2B2; --noir-veil:#2E2E2E; --ethereal-brass:#C8B898; --white:#fff;
  --surface: var(--white); --surface-dim: var(--cloud-whisper); --surface-border: var(--silver-mist);
  --text: var(--noir-veil); --text-muted: var(--pale-graphite); --text-light: var(--silver-mist);
  --primary: var(--ethereal-brass); --primary-dark: #b8a382; --primary-light: rgba(200,184,152,.15);
  --success: #10b981; --danger: #ef4444; --warning: #f59e0b;
  --radius: 8px; --radius-lg: 12px; --shadow: 0 1px 3px rgba(46,46,46,.08);
  --shadow-lg: 0 10px 25px rgba(46,46,46,.1); --transition: all 0.2s ease;
  --site-max: 1280px; --site-pad: clamp(16px,4vw,32px);
}
.shop-nuvora{ 
  background: var(--surface-dim); color: var(--text); 
  font-family: 'Manrope',system-ui,sans-serif; 
  min-height: 100vh; line-height: 1.5;
}
.shop-wrap{ 
  max-width: var(--site-max); margin: 0 auto; 
  padding: 24px var(--site-pad); position: relative;
}

/* Modern Header */
.shop-head{ 
  display: flex; justify-content: space-between; align-items: center; 
  gap: 20px; margin-bottom: 24px; padding: 0;
}
.shop-head h1{ 
  font-weight: 700; letter-spacing: -0.025em; margin: 0; 
  color: var(--text); font-size: clamp(1.75rem, 3vw, 2.25rem);
}
.shop-breadcrumb{ 
  font-size: 0.875rem; color: var(--text-muted); font-weight: 500;
}

/* Modern Toolbar */
.shop-toolbar{
  display: flex; gap: 12px; align-items: center; justify-content: space-between;
  padding: 16px; border: 1px solid var(--surface-border); border-radius: var(--radius-lg); 
  background: var(--surface); margin-bottom: 24px; box-shadow: var(--shadow);
}
.tb-left, .tb-right{ display: flex; gap: 8px; flex-wrap: wrap; align-items: center }
.tb-search{ position: relative }
.tb-search input{
  padding: 8px 36px 8px 12px; border: 1px solid var(--surface-border); 
  border-radius: var(--radius); background: var(--surface); min-width: 200px; 
  font-size: 0.875rem; transition: var(--transition);
}
.tb-search input:focus{
  outline: none; border-color: var(--primary); 
  box-shadow: 0 0 0 3px var(--primary-light);
}
.tb-search .icon{ 
  position: absolute; right: 10px; top: 50%; transform: translateY(-50%); 
  width: 16px; height: 16px; color: var(--text-muted);
}
.tb-select{ 
  padding: 8px 12px; border: 1px solid var(--surface-border); 
  border-radius: var(--radius); background: var(--surface); font-size: 0.875rem;
  transition: var(--transition); cursor: pointer;
}
.tb-select:focus{ outline: none; border-color: var(--primary); }
.view-toggle{ display: flex; gap: 4px }
.view-toggle button{
  border: 1px solid var(--surface-border); background: var(--surface); 
  border-radius: var(--radius); padding: 8px 12px; cursor: pointer; 
  transition: var(--transition); font-size: 0.75rem; font-weight: 500;
}
.view-toggle button:hover{ border-color: var(--primary); }
.view-toggle button[aria-pressed="true"]{ 
  background: var(--primary); color: white; border-color: var(--primary);
}
.btn-filters{ 
  border: 1px solid var(--surface-border); background: var(--surface); 
  border-radius: var(--radius); padding: 8px 12px; cursor: pointer; 
  display: none; transition: var(--transition); font-size: 0.875rem;
}
.btn-filters:hover{ border-color: var(--primary); }

/* Layout */
.shop-body{ display: grid; grid-template-columns: 280px 1fr; gap: 24px; align-items: start }

/* Zorien-style Sidebar */
.shop-side{
  background: var(--surface); border: 1px solid var(--surface-border); 
  border-radius: var(--radius-lg); padding: 20px 16px; 
  box-shadow: var(--shadow); position: sticky; top: 24px;
}
.shop-side h3{ 
  font-weight: 600; font-size: 1.125rem; margin: 0 0 16px; 
  color: var(--text); padding-bottom: 8px; 
  border-bottom: 1px solid var(--surface-border);
}
.filter-acc details{ 
  border-top: 1px solid var(--surface-border); margin-top: 12px;
  transition: var(--transition);
}
.filter-acc details:first-child{ border-top: none; margin-top: 0; }
.filter-acc summary{ 
  list-style: none; cursor: pointer; padding: 12px 0; position: relative; 
  font-weight: 500; font-size: 0.875rem; color: var(--text);
  transition: var(--transition);
}
.filter-acc summary::-webkit-details-marker{ display: none }
.filter-acc summary::after{ 
  content: "▼"; position: absolute; right: 0; top: 50%; 
  transform: translateY(-50%) rotate(-90deg); color: var(--text-muted); 
  font-size: 0.75rem; transition: var(--transition);
}
.filter-acc details[open] summary::after{ transform: translateY(-50%) rotate(0deg) }
.filter-acc summary:hover{ color: var(--primary) }
.filter-panel{ padding: 8px 0 0 }
.filter-list{ display: flex; flex-direction: column; gap: 6px }
.filter-list label{ 
  display: flex; gap: 8px; align-items: center; cursor: pointer; 
  padding: 6px 0; transition: var(--transition); font-size: 0.875rem;
}
.filter-list label:hover{ color: var(--primary) }
.filter-list input[type="checkbox"]{
  width: 16px; height: 16px; accent-color: var(--primary);
}
.reset-row{ display: flex; gap: 8px; flex-wrap: wrap; margin-top: 16px }
.reset-row button{
  border: 1px solid var(--surface-border); background: var(--surface); 
  color: var(--text-muted); border-radius: var(--radius); 
  padding: 6px 12px; cursor: pointer; font-weight: 500; font-size: 0.75rem;
  transition: var(--transition);
}
.reset-row button:hover{
  background: var(--primary); color: white; border-color: var(--primary);
}
.active-tags{ 
  display: flex; gap: 6px; flex-wrap: wrap; margin-bottom: 12px; 
  padding: 12px 0; min-height: 20px;
}
.tag-chip{ 
  display: inline-flex; gap: 4px; align-items: center; 
  background: var(--primary-light); color: var(--primary-dark); 
  border-radius: var(--radius); padding: 4px 8px; font-size: 0.75rem; 
  font-weight: 500; transition: var(--transition);
}
.tag-chip:hover{ background: var(--primary); color: white }
.tag-chip button{ 
  all: unset; cursor: pointer; width: 14px; height: 14px; 
  display: flex; align-items: center; justify-content: center;
  border-radius: 50%; background: rgba(0,0,0,.1); font-size: 0.625rem;
  transition: var(--transition);
}
.tag-chip button:hover{ background: rgba(0,0,0,.2) }

/* Grid */
.shop-grid{ min-height: 200px }
.products-grid{ 
  display: grid; grid-template-columns: repeat(4, 1fr); 
  gap: 20px; align-items: stretch; transition: var(--transition);
}
.products-grid.cols-2{ grid-template-columns: repeat(2, 1fr); }
.products-grid.cols-3{ grid-template-columns: repeat(3, 1fr); }
.products-grid.cols-4{ grid-template-columns: repeat(4, 1fr); }
.products-grid.cols-6{ grid-template-columns: repeat(6, 1fr); gap: 16px; }
.products-grid.cols-8{ grid-template-columns: repeat(8, 1fr); gap: 12px; }

/* Adjust card content for high density grids */
.products-grid.cols-6 .card .content,
.products-grid.cols-8 .card .content{
  padding: 12px; min-height: 100px;
}
.products-grid.cols-6 .card .title,
.products-grid.cols-8 .card .title{
  font-size: 0.8125rem; line-height: 1.3;
}
.products-grid.cols-6 .card .price,
.products-grid.cols-8 .card .price{
  font-size: 0.875rem;
}
.products-grid.cols-6 .card .sku,
.products-grid.cols-8 .card .sku{
  font-size: 0.6875rem;
}
.products-grid.cols-6 .btn-view,
.products-grid.cols-8 .btn-view{
  padding: 4px 8px; font-size: 0.6875rem;
}
.products-grid.cols-8 .card .meta{
  flex-direction: column; gap: 6px; align-items: stretch;
}
.products-grid.cols-8 .card .actions{
  justify-content: center;
}

/* Zorien-style Cards */
.card{
  background: var(--surface); border: 1px solid var(--surface-border); 
  border-radius: var(--radius-lg); overflow: hidden; box-shadow: var(--shadow);
  display: flex; flex-direction: column; position: relative; cursor: pointer;
  transition: var(--transition); opacity: 0; transform: translateY(10px);
  animation: cardFadeIn 0.4s ease forwards;
}
.card:hover{ 
  transform: translateY(-4px); box-shadow: var(--shadow-lg); 
  border-color: var(--primary);
}
.card .thumb{ 
  aspect-ratio: 1/1; background: var(--surface-dim); overflow: hidden; 
  position: relative; display: flex; align-items: center; justify-content: center;
}
.card img{ 
  width: 100%; height: 100%; object-fit: cover; 
  transition: transform 0.3s ease;
}
.card:hover img{ transform: scale(1.02) }

/* Quick Eye (Zorien Style) */
.quick-eye{
  position: absolute; right: 12px; top: 12px; width: 36px; height: 36px; 
  display: inline-flex; align-items: center; justify-content: center;
  background: rgba(255,255,255,0.95); color: var(--text-muted); 
  border-radius: var(--radius); opacity: 0; transition: var(--transition); 
  cursor: pointer; box-shadow: var(--shadow); backdrop-filter: blur(8px);
}
.card:hover .quick-eye{ opacity: 1; transform: scale(1.05) }
.quick-eye:hover{ 
  background: var(--primary); color: white; transform: scale(1.1);
}
.quick-eye svg{ width: 18px; height: 18px; fill: currentColor }

@keyframes cardFadeIn{
  to{ opacity: 1; transform: translateY(0) }
}

/* Card Content */
.card .content{ 
  display: flex; flex-direction: column; gap: 8px; 
  padding: 16px; min-height: 120px; flex: 1;
}
.card .title{ 
  color: var(--text); text-decoration: none; font-weight: 600; 
  font-size: 0.875rem; line-height: 1.4; margin: 0;
  display: -webkit-box; -webkit-box-orient: vertical; 
  -webkit-line-clamp: 2; line-clamp: 2; overflow: hidden;
}
.card .price{
  color: var(--text); font-weight: 600; font-size: 1rem;
  margin: 4px 0;
}
.card .meta{
  display: flex; align-items: center; justify-content: space-between;
  margin-top: auto; gap: 8px;
}
.card .sku{
  font-size: 0.75rem; color: var(--text-muted); font-weight: 500;
  text-transform: uppercase; letter-spacing: 0.5px;
}
.card .actions{ display: flex; gap: 6px }
.btn-view{
  padding: 6px 12px; border-radius: var(--radius); font-size: 0.75rem; 
  font-weight: 500; text-decoration: none; transition: var(--transition); 
  cursor: pointer; display: inline-flex; align-items: center; gap: 4px;
  background: var(--text); color: white; border: 1px solid var(--text);
}
.btn-view:hover{
  background: var(--text-muted); border-color: var(--text-muted);
  transform: translateY(-1px);
}

/* Empty States */
.state{ 
  padding: 32px 20px; text-align: center; color: var(--text-muted); 
  background: var(--surface); border: 1px dashed var(--surface-border); 
  border-radius: var(--radius-lg);
}

/* Pagination */
.pager{ display: flex; gap: 4px; flex-wrap: wrap; justify-content: center }
.pager button{ 
  border: 1px solid var(--surface-border); background: var(--surface); 
  border-radius: var(--radius); padding: 8px 12px; cursor: pointer;
  font-size: 0.875rem; font-weight: 500; transition: var(--transition);
}
.pager button:hover:not([disabled]){ 
  background: var(--primary-light); border-color: var(--primary); 
}
.pager button[disabled]{ opacity: 0.5; cursor: not-allowed }
.pager .is-active{ 
  background: var(--primary); color: white; border-color: var(--primary);
}

/* Page Info */
.pagebar{
  display: flex; align-items: center; justify-content: space-between;
  gap: 16px; margin-top: 24px; flex-wrap: wrap;
}
.page-info{ color: var(--text-muted); font-size: 0.875rem }

/* Responsive Design */
@media (max-width: 1024px){
  .shop-body{ grid-template-columns: 260px 1fr; gap: 20px }
  .products-grid.cols-6{ grid-template-columns: repeat(4, 1fr); }
  .products-grid.cols-8{ grid-template-columns: repeat(6, 1fr); }
}

@media (max-width: 768px){
  .shop-body{ grid-template-columns: 1fr }
  .btn-filters{ 
    display: inline-flex; align-items: center; gap: 6px; 
    font-size: 0.875rem;
  }
  .btn-filters::before{
    content: "⚙"; font-size: 0.875rem;
  }
  .shop-side{
    position: fixed; z-index: 9999; inset: auto 0 0 0; top: auto; 
    height: 70vh; transform: translateY(100%); border-radius: var(--radius-lg) var(--radius-lg) 0 0; 
    transition: transform 0.3s cubic-bezier(0.4, 0.0, 0.2, 1); 
    overflow: auto; padding: 20px 16px 32px;
    box-shadow: var(--shadow-lg);
  }
  .shop-side.open{ transform: translateY(0) }
  .products-grid.cols-4,
  .products-grid.cols-6,
  .products-grid.cols-8{ grid-template-columns: repeat(3, 1fr); }
  .products-grid.cols-3{ grid-template-columns: repeat(2, 1fr); }
  .pagebar{ flex-direction: column; align-items: stretch; gap: 16px }
  .pagebar .pager{ justify-content: center }
}

@media (max-width: 640px){
  .shop-toolbar{ padding: 12px; flex-direction: column; gap: 12px }
  .tb-left, .tb-right{ width: 100%; justify-content: space-between }
  .tb-search input{ min-width: 160px }
  .products-grid,
  .products-grid.cols-2,
  .products-grid.cols-3,
  .products-grid.cols-4,
  .products-grid.cols-6,
  .products-grid.cols-8{ grid-template-columns: 1fr; gap: 16px }
  .shop-head{ flex-direction: column; text-align: center; gap: 12px }
  .shop-head h1{ font-size: clamp(1.5rem, 5vw, 2rem) }
}

/* Loading & Empty States */
.loading-state, .empty-state, .error-state{
  grid-column: 1/-1; text-align: center; padding: 48px 20px;
  background: var(--surface); border-radius: var(--radius-lg);
  border: 1px solid var(--surface-border);
}

.loading-state{
  display: flex; flex-direction: column; align-items: center; gap: 16px;
}

.loading-spinner{
  width: 32px; height: 32px; border: 3px solid var(--surface-border);
  border-top: 3px solid var(--primary); border-radius: 50%;
  animation: spin 1s linear infinite;
}

.empty-state .empty-icon, .error-state .error-icon{
  font-size: 2.5rem; margin-bottom: 16px; opacity: 0.6; color: var(--text-muted);
}

.empty-state h3, .error-state h3{
  font-weight: 600; font-size: 1.25rem; color: var(--text); margin-bottom: 8px;
}

.empty-state p, .error-state p{
  color: var(--text-muted); margin-bottom: 24px;
}

.retry-btn{
  padding: 10px 20px; background: var(--primary); color: white;
  border: none; border-radius: var(--radius); font-weight: 500;
  cursor: pointer; transition: var(--transition);
}

.retry-btn:hover{
  background: var(--primary-dark); transform: translateY(-1px);
}

@keyframes spin{
  to{ transform: rotate(360deg) }
}

.loading{
  display: inline-flex; align-items: center; gap: 8px; color: var(--primary);
}

/* Espacio para futuras mejoras */

/* Modern Modal Quick View */
.qv-backdrop{ 
  position: fixed; inset: 0; background: rgba(0,0,0,0.6); display: none; 
  place-items: center; z-index: 99999; backdrop-filter: blur(4px);
}
.qv-backdrop.open{ display: grid }
.qv-modal{ 
  width: min(1000px, 95vw); max-height: 90vh; background: var(--surface); 
  border-radius: var(--radius-lg); overflow: hidden; display: grid; 
  grid-template-columns: 1fr 1fr; box-shadow: var(--shadow-lg);
}
@media (max-width: 820px){ .qv-modal{ grid-template-columns: 1fr } }
.qv-left{ 
  background: var(--surface-dim); display: flex; flex-direction: column; 
  gap: 8px; padding: 16px;
}
.qv-main{ 
  width: 100%; aspect-ratio: 1/1; background: var(--surface); 
  display: flex; align-items: center; justify-content: center;
  border-radius: var(--radius);
}
.qv-main img{ width: 100%; height: 100%; object-fit: contain }
.qv-thumbs{ display: grid; grid-template-columns: repeat(6,1fr); gap: 6px }
.qv-thumbs button{ 
  border: 1px solid var(--surface-border); background: var(--surface); 
  height: 54px; cursor: pointer; border-radius: var(--radius);
  transition: var(--transition);
}
.qv-thumbs button:hover{ border-color: var(--primary) }
.qv-thumbs img{ width: 100%; height: 100%; object-fit: cover }
.qv-right{ padding: 24px; overflow: auto }
.qv-title{ 
  font-weight: 600; font-size: clamp(18px, 2vw, 24px); 
  margin: 0 0 16px; color: var(--text);
}
.qv-acc details{ border-top: 1px solid var(--surface-border); margin-top: 12px }
.qv-acc summary{ 
  list-style: none; padding: 12px 0; cursor: pointer; position: relative; 
  font-weight: 500; transition: var(--transition);
}
.qv-acc summary::-webkit-details-marker{ display: none }
.qv-acc summary::after{ 
  content: "▼"; position: absolute; right: 0; top: 50%; 
  transform: translateY(-50%) rotate(-90deg); font-size: 0.75rem;
  color: var(--text-muted); transition: var(--transition);
}
.qv-acc details[open] summary::after{ transform: translateY(-50%) rotate(0deg) }
.qv-acc summary:hover{ color: var(--primary) }
.qv-close{
  position: absolute; top: 16px; right: 16px; z-index: 10;
  width: 32px; height: 32px; border: none; border-radius: var(--radius);
  background: rgba(0,0,0,0.1); color: var(--text-muted);
  cursor: pointer; display: flex; align-items: center; justify-content: center;
  transition: var(--transition);
}
.qv-close:hover{
  background: var(--danger); color: white;
}

/* Loading State for Images */
.card .thumb::before{
  content: ""; position: absolute; inset: 0; z-index: 1;
  background: url("data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12,4a8,8,0,0,1,7.89,6.7A1.53,1.53,0,0,0,21.38,12h0a1.5,1.5,0,0,0,1.48-1.75,11,11,0,0,0-21.72,0A1.5,1.5,0,0,0,2.62,12h0a1.53,1.53,0,0,0,1.49-1.3A8,8,0,0,1,12,4Z' fill='%2364748b'%3e%3canimateTransform attributeName='transform' dur='0.75s' repeatCount='indefinite' type='rotate' values='0 12 12;360 12 12'/%3e%3c/path%3e%3c/svg%3e") center/20px no-repeat;
  opacity: 1; transition: opacity 0.3s ease;
}
.card .thumb img{ position: relative; z-index: 2; }
.card .thumb:has(img[src]:not([src=""])) ::before{ opacity: 0; }
</style>

<section class="shop-nuvora" id="shopApp">
  <div class="shop-wrap">
    <div class="shop-head">
      <div>
        <div class="shop-breadcrumb">Home / Natural Materials Collection</div>
        <h1>NUVORA Collection</h1>
      </div>
      <button class="btn-filters" type="button" aria-expanded="false" id="btnFilters">Filters</button>
    </div>

    <!-- Toolbar -->
    <div class="shop-toolbar">
      <div class="tb-left">
        <div class="tb-search">
          <input id="q" type="search" placeholder="Search products…" aria-label="Search products">
          <svg class="icon" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M10 2a8 8 0 105.293 14.293l4.707 4.707 1.414-1.414-4.707-4.707A8 8 0 0010 2zm0 2a6 6 0 110 12A6 6 0 0110 4z"/></svg>
        </div>
        <select id="perPage" class="tb-select" aria-label="Items per page">
          <option value="12">12 / page</option>
          <option value="24">24 / page</option>
          <option value="48">48 / page</option>
        </select>
      </div>
      <div class="tb-right">
        <select id="orderby" class="tb-select" aria-label="Sort by">
          <option value="">Sort: Default</option>
          <option value="popularity">Best Selling</option>
          <option value="rating">Top Rated</option>
          <option value="date">Newest</option>
          <option value="price">Price: Low to High</option>
          <option value="price-desc">Price: High to Low</option>
        </select>
        <select id="gridDensity" class="tb-select" aria-label="Grid layout">
          <option value="2">2 columns</option>
          <option value="3">3 columns</option>
          <option value="4" selected>4 columns</option>
          <option value="6">6 columns</option>
          <option value="8">8 columns</option>
        </select>
        <div class="view-toggle" role="group" aria-label="View">
          <button type="button" class="btn-view" data-view="grid" aria-pressed="true" title="Grid">GRID</button>
          <button type="button" class="btn-view" data-view="list" aria-pressed="false" title="List">LIST</button>
        </div>
      </div>
    </div>

    <div class="shop-body">
      <!-- Sidebar filtros -->
      <aside class="shop-side" id="filtersDrawer" aria-label="Filters" tabindex="-1">
        <h3>Filters</h3>

        <div class="active-tags" id="activeTags"></div>

        <div class="filter-acc">
          <details open>
            <summary>Material Collections</summary>
            <div class="filter-panel">
              <div class="filter-list" id="materialList">
                <label><input type="checkbox" value="plaster"> Plaster Collection</label>
                <label><input type="checkbox" value="alabaster"> Alabaster Collection</label>
                <label><input type="checkbox" value="wood"> Wood Collection</label>
                <label><input type="checkbox" value="glass"> Glass Collection</label>
                <label><input type="checkbox" value="concrete"> Concrete Collection</label>
                <label><input type="checkbox" value="brass"> Brass Collection</label>
              </div>
            </div>
          </details>

          <details>
            <summary>Natural Properties</summary>
            <div class="filter-panel">
              <div class="filter-list" id="propertyList">
                <label><input type="checkbox" value="organic"> Organic Materials</label>
                <label><input type="checkbox" value="mineral"> Mineral Based</label>
                <label><input type="checkbox" value="textured"> Natural Texture</label>
                <label><input type="checkbox" value="smooth"> Smooth Finish</label>
                <label><input type="checkbox" value="porous"> Breathable Surface</label>
              </div>
            </div>
          </details>

          <details>
            <summary>Collections</summary>
            <div class="filter-panel">
              <div class="filter-list" id="collectionList"><div class="note">Looking for attribute “collection”…</div></div>
            </div>
          </details>

          <details>
            <summary>Finish / Material</summary>
            <div class="filter-panel">
              <div class="filter-list" id="finishList"><div class="note">Looking for “finish”/“material”…</div></div>
            </div>
          </details>

          <details>
            <summary>Price</summary>
            <div class="filter-panel" style="display:flex; gap:8px">
              <input type="number" id="minPrice" placeholder="Min" style="width:50%;padding:8px;border:1px solid rgba(0,0,0,.2);border-radius:8px">
              <input type="number" id="maxPrice" placeholder="Max" style="width:50%;padding:8px;border:1px solid rgba(0,0,0,.2);border-radius:8px">
            </div>
          </details>

          <div class="reset-row">
            <button id="btnReset" type="button">Clear filters</button>
          </div>
        </div>
      </aside>

      <!-- Grid + Paginación -->
      <main class="shop-grid">
        <div id="grid" class="products-grid" aria-live="polite"></div>

        <!-- Pagebar: contador + botones -->
        <div class="pagebar">
          <div id="pageInfo" class="page-info" aria-live="polite"></div>
          <div id="pager" class="pager"></div>
        </div>
      </main>
    </div>
  </div>
</section>

<!-- Modal Quick View -->
<div class="qv-backdrop" id="qv">
  <div class="qv-modal" role="dialog" aria-modal="true" aria-labelledby="qvTitle">
    <button class="qv-close" onclick="closeQv()" aria-label="Close">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M18 6L6 18M6 6l12 12"/>
      </svg>
    </button>
    <div class="qv-left">
      <div class="qv-main"><img id="qvMain" alt=""></div>
      <div class="qv-thumbs" id="qvThumbs"></div>
    </div>
    <div class="qv-right">
      <h3 class="qv-title" id="qvTitle"></h3>
      <div class="qv-acc">
        <details open>
          <summary>Description</summary>
          <div id="qvDesc" style="color: var(--text-muted); line-height: 1.6;"></div>
        </details>
        <details>
          <summary>Details</summary>
          <div id="qvAttrs" style="color: var(--text-muted); line-height: 1.6;"></div>
        </details>
      </div>
    </div>
  </div>
</div>

<script>
(function(){
  const API = `${location.origin}/wp-json/wc/store/v1`;
  const state = {
    page: +(new URL(location.href).searchParams.get('page')||1),
    perPage: +(new URL(location.href).searchParams.get('per_page')||localStorage.getItem('nuvora_shop_pp')||12),
    orderby: new URL(location.href).searchParams.get('orderby')||'',
    search: new URL(location.href).searchParams.get('s')||'',
    categories: new Set(), tags: new Set(),
    min_price: new URL(location.href).searchParams.get('min_price')||'',
    max_price: new URL(location.href).searchParams.get('max_price')||'',
    view: localStorage.getItem('nuvora_shop_view') || 'grid',
    gridDensity: localStorage.getItem('nuvora_grid_density') || '4',
    attrs: {},          // slug -> Set()
    attrIds: {},        // slug -> attribute id
    taxIndex: { cat:{}, tag:{} },
    total: 0            // total de productos de la consulta
  };

  const $ = s=>document.querySelector(s);
  const grid = $('#grid'), pager = $('#pager'), activeTags = $('#activeTags'), pageInfo = $('#pageInfo');

  async function jget(path, params = {}, attrFilters) {
    const url = new URL(API + path);
    Object.entries(params).forEach(([k, v]) => {
      if (v !== undefined && v !== null && v !== '') url.searchParams.set(k, v);
    });

    // ---> cambios: usar attributes[n][terms]
    if (attrFilters) {
      let i = 0;
      Object.entries(attrFilters).forEach(([slug, set]) => {
        if (!set || set.size === 0) return;
        url.searchParams.append(`attributes[${i}][attribute]`, `pa_${slug}`);
        url.searchParams.append(`attributes[${i}][operator]`, 'in'); // opcional, pero claro
        url.searchParams.append(`attributes[${i}][terms]`, [...set].join(','));
        i++;
      });
    }

    const r = await fetch(url, { credentials: 'same-origin' });
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    return r.json();
  }


  /* ---------- TAXONOMÍAS ---------- */
  async function loadTaxonomies() {
    /* -------- Categorías y Tags -------- */
    try {
      const [cats, tags] = await Promise.all([
        jget('/products/categories', { per_page: 100, hide_empty: true }),
        jget('/products/tags', { per_page: 100, hide_empty: true })
      ]);

      // Categorías
      const catList = document.querySelector('#catList');
      catList.innerHTML = '';
      cats.forEach(c => {
        state.taxIndex.cat[c.id] = c.name;
        const id = `cat-${c.id}`;
        const label = document.createElement('label');
        label.innerHTML =
          `<input type="checkbox" id="${id}" value="${c.id}"> <span>${c.name}</span>`;
        label.querySelector('input').addEventListener('change', e => {
          e.target.checked ? state.categories.add(c.id) : state.categories.delete(c.id);
          state.page = 1; syncURL(); renderActive(); loadProducts();
        });
        catList.appendChild(label);
      });

      // Tags
      const tagList = document.querySelector('#tagList');
      tagList.innerHTML = '';
      tags.forEach(t => {
        state.taxIndex.tag[t.id] = t.name;
        const id = `tag-${t.id}`;
        const label = document.createElement('label');
        label.innerHTML =
          `<input type="checkbox" id="${id}" value="${t.id}"> <span>${t.name}</span>`;
        label.querySelector('input').addEventListener('change', e => {
          e.target.checked ? state.tags.add(t.id) : state.tags.delete(t.id);
          state.page = 1; syncURL(); renderActive(); loadProducts();
        });
        tagList.appendChild(label);
      });
    } catch (e) {
      document.querySelector('#catList').innerHTML =
        '<div class="state">Could not load categories.</div>';
      document.querySelector('#tagList').innerHTML =
        '<div class="state">Could not load tags.</div>';
      console.error(e);
    }

    /* -------- Atributos (Collection + Finish/Material) -------- */
    try {
      const attrs = await jget('/products/attributes', { per_page: 100 });
      const bySlug = {};
      attrs.forEach(a => { bySlug[a.slug] = a; bySlug[a.slug.toLowerCase()] = a; });

      // Helper para encontrar atributo por slug o por nombre visible
      const findAttr = (slug, nameFallback) =>
        bySlug[slug] ||
        attrs.find(a => a.name && a.name.toLowerCase() === nameFallback.toLowerCase());

      /* ----- COLLECTION ----- */
      const collAttr = findAttr('collection', 'collection');
      if (collAttr) {
        state.attrIds.collection = collAttr.id;
        state.attrs.collection = state.attrs.collection || new Set();

        const terms = await jget(`/products/attributes/${collAttr.id}/terms`, {
          per_page: 100,
          hide_empty: true
        });

        const box = document.querySelector('#collectionList');
        box.innerHTML = terms.length
          ? ''
          : '<div class="state">No products assigned to collections yet.</div>';

        terms.forEach(t => {
          const valueSlug = t.slug;            // lo que enviaremos en "terms"
          const id = `attr-collection-${valueSlug}`;
          const label = document.createElement('label');
          label.innerHTML =
            `<input type="checkbox" id="${id}" value="${valueSlug}"> <span>${t.name}</span>`;
          label.querySelector('input').addEventListener('change', e => {
            e.target.checked
              ? state.attrs.collection.add(valueSlug)
              : state.attrs.collection.delete(valueSlug);
            state.page = 1; syncURL(); renderActive(); loadProducts();
          });
          box.appendChild(label);
        });
      } else {
        document.querySelector('#collectionList').innerHTML =
          '<div class="state">No “collection” attribute found.</div>';
      }

      /* ----- FINISH / MATERIAL ----- */
      // intenta por "finish", si no existe intenta por "material"
      const finAttr = findAttr('finish', 'finish') || findAttr('material', 'material');
      if (finAttr) {
        const slug = finAttr.slug; // puede ser "finish" o "material"
        state.attrIds[slug] = finAttr.id;
        state.attrs[slug] = state.attrs[slug] || new Set();

        const terms = await jget(`/products/attributes/${finAttr.id}/terms`, {
          per_page: 100,
          hide_empty: true
        });

        const box = document.querySelector('#finishList');
        box.innerHTML = terms.length
          ? ''
          : '<div class="state">No products with finish/material terms yet.</div>';

        terms.forEach(t => {
          const valueSlug = t.slug;
          const id = `attr-${slug}-${valueSlug}`;
          const label = document.createElement('label');
          label.innerHTML =
            `<input type="checkbox" id="${id}" value="${valueSlug}"> <span>${t.name}</span>`;
          label.querySelector('input').addEventListener('change', e => {
            e.target.checked
              ? state.attrs[slug].add(valueSlug)
              : state.attrs[slug].delete(valueSlug);
            state.page = 1; syncURL(); renderActive(); loadProducts();
          });
          box.appendChild(label);
        });
      } else {
        document.querySelector('#finishList').innerHTML =
          '<div class="state">No “finish/material” attribute found.</div>';
      }
    } catch (e) {
      console.error('Attributes error', e);
      document.querySelector('#collectionList').innerHTML =
        '<div class="state">Could not load attributes.</div>';
      document.querySelector('#finishList').innerHTML =
        '<div class="state">Could not load attributes.</div>';
    }
  }


  /* ---------- UI ACTIVA ---------- */
  function renderActive(){
    activeTags.innerHTML='';
    const add = (label, onRemove)=>{
      const chip=document.createElement('span'); chip.className='tag-chip';
      chip.innerHTML=`${label}<button aria-label="remove">✕</button>`;
      chip.querySelector('button').addEventListener('click', onRemove);
      activeTags.appendChild(chip);
    };
    [...state.categories].forEach(id=> add(state.taxIndex.cat[id]||`Cat ${id}`, ()=>{ state.categories.delete(id); const cb=$(`#cat-${id}`); if(cb) cb.checked=false; state.page=1; syncURL(); loadProducts(); renderActive(); }));
    [...state.tags].forEach(id=> add(state.taxIndex.tag[id]||`Tag ${id}`, ()=>{ state.tags.delete(id); const cb=$(`#tag-${id}`); if(cb) cb.checked=false; state.page=1; syncURL(); loadProducts(); renderActive(); }));
    Object.entries(state.attrs).forEach(([slug,set])=>{
      [...set].forEach(s=> add(`${slug}: ${s}`, ()=>{ set.delete(s); const cb=$(`#attr-${slug}-${s}`); if(cb) cb.checked=false; state.page=1; syncURL(); loadProducts(); renderActive(); }));
    });
    if(state.min_price) add(`min ${state.min_price}`, ()=>{ state.min_price=''; $('#minPrice').value=''; state.page=1; syncURL(); loadProducts(); renderActive(); });
    if(state.max_price) add(`max ${state.max_price}`, ()=>{ state.max_price=''; $('#maxPrice').value=''; state.page=1; syncURL(); loadProducts(); renderActive(); });
  }

  /* ---------- RENDER PRODUCTS + PAGINACIÓN ---------- */
  async function loadProducts(){
    grid.innerHTML=`
      <div class="loading-state">
        <div class="loading-spinner"></div>
        <div>Loading products...</div>
      </div>
    `; 
    pager.innerHTML=''; 
    if(pageInfo) pageInfo.innerHTML='<span class="loading">Loading...</span>';
    try{
      const params = {
        page: state.page, per_page: state.perPage,
        orderby: state.orderby || undefined,
        search: state.search || undefined,
        category: [...state.categories].join(',') || undefined,
        tag: [...state.tags].join(',') || undefined,
        min_price: state.min_price || undefined,
        max_price: state.max_price || undefined
      };

      const data = await jget('/products', params, state.attrs);

      if(!Array.isArray(data) || data.length===0){
        grid.innerHTML=`
          <div class="empty-state">
            <div class="empty-icon">🔍</div>
            <h3>No products found</h3>
            <p>Try adjusting your filters or search terms</p>
            <button onclick="resetFilters()" class="retry-btn">Clear filters</button>
          </div>
        `; 
        state.total = 0;
        updatePageInfo();
        pager.innerHTML = '';
        return;
      }

      // Get total count from headers
      const totalFromData = data.length;
      let estimatedTotal = totalFromData;
      
      // If we got a full page of results, there might be more
      if (totalFromData === state.perPage) {
        // Try to get total count from a separate API call
        try {
          const allParams = { ...params, per_page: 1 };
          const testData = await jget('/products', allParams, state.attrs);
          // Estimate total based on current page
          estimatedTotal = state.page * state.perPage + (testData.length > 0 ? state.perPage : 0);
        } catch {
          // Fallback: assume there might be more pages
          estimatedTotal = (state.page + 1) * state.perPage;
        }
      } else {
        // We got less than a full page, so this is likely the last page
        estimatedTotal = (state.page - 1) * state.perPage + totalFromData;
      }

      const frag=document.createDocumentFragment();
      data.forEach(p=>{
        const a = p.permalink || p.href || '#';
        const images = (p.images||[]).map(i=>i.src);
        const img = images[0] || '';
        const article=document.createElement('article');
        article.className='card';
        article.style.animationDelay = `${(data.indexOf(p) % 12) * 50}ms`;
        article.innerHTML = `
          <div class="thumb" data-images='${JSON.stringify(images)}'>
            ${img?`<img src="${img}" loading="lazy" alt="${p.name}">`:''}
            <span class="quick-eye" role="button" aria-label="Quick view">
              <svg viewBox="0 0 24 24"><path d="M12 5c-7 0-10 7-10 7s3 7 10 7 10-7 10-7-3-7-10-7zm0 11a4 4 0 1 1 0-8 4 4 0 0 1 0 8z"/></svg>
            </span>
          </div>
          <div class="content">
            <h3 class="title">${p.name}</h3>
            ${p.prices?.price ? `<div class="price">${p.prices.currency_symbol}${p.prices.price}</div>` : ''}
            <div class="meta">
              <div class="sku">SKU-${p.id}</div>
              <div class="actions">
                <a class="btn-view" href="${a}" onclick="event.stopPropagation()">View</a>
              </div>
            </div>
          </div>`;
        // Quick view
        article.querySelector('.quick-eye').addEventListener('click', (e)=>{ e.preventDefault(); e.stopPropagation(); openQuickView(p.id); });
        
        // Click en toda la card para ir al producto
        article.addEventListener('click', (e) => {
          // Solo si no se hizo click en botones
          if (!e.target.closest('.btn-view, .quick-eye')) {
            window.location.href = a;
          }
        });
        
        // Hover slideshow (delay 2s, cada 1.5s)
        const thumb = article.querySelector('.thumb');
        let timer=null, idx=0, interval=null;
        thumb.addEventListener('mouseenter', ()=>{
          if(images.length<=1) return;
          timer = setTimeout(()=>{
            const elImg = thumb.querySelector('img'); idx=0;
            interval = setInterval(()=>{ idx=(idx+1)%images.length; elImg.src = images[idx]; }, 1500);
          }, 2000);
        });
        ['mouseleave','click','touchstart'].forEach(ev=> thumb.addEventListener(ev, ()=>{
          if(timer){ clearTimeout(timer); timer=null; }
          if(interval){ clearInterval(interval); interval=null; }
          const elImg = thumb.querySelector('img'); if(elImg) elImg.src = images[0]||elImg.src;
        }, {passive:true}));
        // Agregar animación de entrada
        article.style.opacity = '0';
        article.style.transform = 'translateY(20px)';
        frag.appendChild(article);
      });
      grid.innerHTML=''; grid.appendChild(frag);
      
      // Animar entrada de tarjetas
      setTimeout(() => {
        const cards = grid.querySelectorAll('.card');
        cards.forEach((card, index) => {
          setTimeout(() => {
            card.style.transition = 'opacity .6s ease, transform .6s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
          }, index * 100);
        });
      }, 50);

      // Update total and pagination
      state.total = estimatedTotal;
      updatePageInfo();
      renderPager(Math.max(1, Math.ceil(estimatedTotal / state.perPage)));
    }catch(e){
      grid.innerHTML='<div class="state">There was an error loading products.</div>'; console.error(e);
    }
  }

  function renderPager(pages){
    pager.innerHTML=''; 
    if(pages<=1) return;
    
    const mk=(label, page, dis=false, act=false)=>{
      const b=document.createElement('button');
      b.textContent=label;
      if(dis) b.disabled=true;
      if(act) b.classList.add('is-active');
      b.addEventListener('click', ()=>{
        if(!dis && page !== state.page) {
          state.page=page; 
          syncURL(true); 
          loadProducts(); 
          window.scrollTo({top:0,behavior:'smooth'});
        }
      });
      return b;
    };
    
    // Previous buttons
    pager.appendChild(mk('«',1,state.page===1));
    pager.appendChild(mk('‹',Math.max(1,state.page-1),state.page===1));
    
    // Page numbers with smart ellipsis
    const startPage = Math.max(1, Math.min(state.page - 2, pages - 4));
    const endPage = Math.min(pages, Math.max(state.page + 2, 5));
    
    if(startPage > 1) {
      pager.appendChild(mk('1', 1, false, state.page === 1));
      if(startPage > 2) {
        const span=document.createElement('span'); 
        span.textContent='…'; 
        span.style.padding='8px'; 
        pager.appendChild(span);
      }
    }
    
    for(let i=startPage; i<=endPage; i++){
      pager.appendChild(mk(String(i),i,false,i===state.page));
    }
    
    if(endPage < pages) {
      if(endPage < pages - 1) {
        const span=document.createElement('span'); 
        span.textContent='…'; 
        span.style.padding='8px'; 
        pager.appendChild(span);
      }
      pager.appendChild(mk(String(pages), pages, false, state.page === pages));
    }
    
    // Next buttons
    pager.appendChild(mk('›',Math.min(pages,state.page+1),state.page===pages));
    pager.appendChild(mk('»',pages,state.page===pages));
  }

  function updatePageInfo(){
    if(!pageInfo){ return; }
    if(!state.total || state.total<1){ pageInfo.textContent=''; return; }
    const start = (state.page - 1) * state.perPage + 1;
    const end   = Math.min(state.page * state.perPage, state.total);
    pageInfo.textContent = `Showing ${start}–${end} of ${state.total}`;
  }

  /* ---------- URL y eventos ---------- */
  function syncURL(replace=false){
    const url=new URL(location.href);
    const set=(k,v)=>{ if(v) url.searchParams.set(k,v); else url.searchParams.delete(k); };
    set('page', state.page>1?state.page:'');
    set('per_page', state.perPage!==12?state.perPage:'');
    set('orderby', state.orderby);
    set('s', state.search);
    set('category', [...state.categories].join(','));
    set('tag', [...state.tags].join(','));
    set('min_price', state.min_price);
    set('max_price', state.max_price);
    (replace?history.replaceState:history.pushState).call(history, {}, '', url.toString());
  }

  // Search
  $('#q').value = state.search;
  $('#q').addEventListener('keydown', e=>{
    if(e.key==='Enter'){ e.preventDefault(); state.search=e.target.value.trim(); state.page=1; syncURL(); loadProducts(); }
  });

  // Orden
  $('#orderby').value = state.orderby;
  $('#orderby').addEventListener('change', e=>{ state.orderby=e.target.value; state.page=1; syncURL(); loadProducts(); });

  // Precio
  $('#minPrice').value = state.min_price; $('#maxPrice').value = state.max_price;
  $('#minPrice').addEventListener('change', e=>{ state.min_price=e.target.value; state.page=1; syncURL(); loadProducts(); });
  $('#maxPrice').addEventListener('change', e=>{ state.max_price=e.target.value; state.page=1; syncURL(); loadProducts(); });

  // Items por página
  $('#perPage').value = state.perPage;
  $('#perPage').addEventListener('change', e=>{ state.perPage=+e.target.value; localStorage.setItem('lunvyr_shop_pp', state.perPage); state.page=1; syncURL(); loadProducts(); });

  // Reset
  function resetFilters() {
    state.page=1; state.orderby=''; state.search=''; state.min_price=''; state.max_price='';
    state.categories.clear(); state.tags.clear();
    Object.keys(state.attrs).forEach(k=> state.attrs[k].clear());
    document.querySelectorAll('#catList input,#tagList input,[id^="attr-"]').forEach(cb=>cb.checked=false);
    $('#orderby').value=''; $('#q').value=''; $('#minPrice').value=''; $('#maxPrice').value='';
    renderActive(); syncURL(); loadProducts();
  }
  $('#btnReset').addEventListener('click', resetFilters);
  
  // Make resetFilters global for empty state button
  window.resetFilters = resetFilters;

  // View
  const viewBtns=document.querySelectorAll('.btn-view');
  function setView(v){ 
    state.view=v; 
    viewBtns.forEach(b=>b.setAttribute('aria-pressed', String(b.dataset.view===v))); 
    if(v==='list'){ 
      grid.style.gridTemplateColumns='1fr'; 
      grid.className = 'products-grid';
    } else { 
      grid.style.gridTemplateColumns=''; 
      setGridDensity(state.gridDensity);
    } 
    localStorage.setItem('lunvyr_shop_view', v); 
  }
  setView(state.view); 
  viewBtns.forEach(b=> b.addEventListener('click', ()=> setView(b.dataset.view)));

  // Grid Density
  $('#gridDensity').value = state.gridDensity;
  function setGridDensity(density) {
    state.gridDensity = density;
    grid.className = `products-grid cols-${density}`;
    localStorage.setItem('nuvora_grid_density', density);
  }
  $('#gridDensity').addEventListener('change', e => {
    if (state.view === 'grid') {
      setGridDensity(e.target.value);
    }
  });
  // Set initial grid density
  if (state.view === 'grid') {
    setGridDensity(state.gridDensity);
  }

  // Drawer mobile
  const drawer = $('#filtersDrawer'), btnFilters = $('#btnFilters');
  btnFilters.addEventListener('click', ()=>{ const open=drawer.classList.toggle('open'); btnFilters.setAttribute('aria-expanded', String(open)); if(open) drawer.focus(); });

  // Back/forward
  window.addEventListener('popstate', ()=>{ loadProducts(); });

  // Init
  (async function init(){
    try{ await jget('/products', { per_page: 1 }); }catch(e){ grid.innerHTML=`<div class="state">Woo Store API no disponible.</div>`; return; }
    await loadTaxonomies();
    renderActive();
    await loadProducts();
  })();

  /* ---------- QUICK VIEW ---------- */
  const qv = $('#qv'), qvMain = $('#qvMain'), qvThumbs = $('#qvThumbs'), qvTitle = $('#qvTitle'), qvDesc = $('#qvDesc'), qvAttrs = $('#qvAttrs');
  function closeQv(){ qv.classList.remove('open'); qvMain.src=''; qvThumbs.innerHTML=''; qvDesc.innerHTML=''; qvAttrs.innerHTML=''; }
  qv.addEventListener('click', (e)=>{ if(e.target===qv) closeQv(); });
  document.addEventListener('keydown', e=>{ if(e.key==='Escape') closeQv(); });

  async function openQuickView(id){
    try{
      const p = await jget(`/products/${id}`);
      qvTitle.textContent = p.name;
      const imgs = (p.images||[]).map(i=>i.src);
      qvMain.src = imgs[0] || '';
      qvThumbs.innerHTML=''; imgs.forEach((src)=>{ const b=document.createElement('button'); b.innerHTML=`<img src="${src}" alt="">`; b.addEventListener('click', ()=>{ qvMain.src=src; }); qvThumbs.appendChild(b); });
      qvDesc.innerHTML = p.short_description || p.description || '<em>No description.</em>';
      const at = (p?.attributes||[]).map(a=>{ const vals=(a.terms||a.options||[]).map(t=> (t?.name||t)).join(', '); return `<div style="margin:.25rem 0"><strong>${a.name}:</strong> ${vals||'-'}</div>`; }).join('');
      qvAttrs.innerHTML = at || '<em>No additional details.</em>';
      qv.classList.add('open');
    }catch(e){ console.error(e); }
  }

  // Shop mejorado y limpio
})();
</script>

